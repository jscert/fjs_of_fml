

*) remove deprecated functions
	let if_any_or_throw w k1 k2 =
	let if_success_or_return w k1 k2 =

*) let if_success_state rv w k 
	=> inline the definition of "if_ter" inside its body
	  and assign an explicit name to the local function there

*) remove Coq_value_prim (flatten the value data type)


*) make sure the "reach condition" works properly

*) clean up the ML code for: type_compare mutability_compare prim_compare;
   for prim_compare, we should be able to match on pairs of arguments, with a catch-all

*) move prim_compare and value_compare to JsInterpreter because it is interesting and should be logged;
   move same_value_dec from jscommonaux 

*) bigger test262 testing.

*) Flag to force esprima to parse in strict mode

*) put online the tool on the jscert website (DONE, needs below:)
	  - make sure to describe the supported features 
	    (ecma5 minus for-in and a few other things)
     - explain that currently JS files are generated
	    from ML files and thus should not be edited,
		 although this might change in the future.
    - assembly.js should have a header
       to tell people not to use this file

*) make display of heap information more complete;
     add a "+details" button 
	  to show additional information about an object, like the
	  getter and setter methods, and also for each field we need
	  to see additional information like enumerable/configurable...

*) There is one place where we compute a "substring" in the code;
  need to check whether the argument is always nonnegative.

*) Coq extraction has generated cases in the order of the definition
  of the constructors in the inductive definition; this is not the
  same order as in the original coq files; we should put back in
  the right order, i'm afraid we need to do this by hand.

*) Only introduce logging instructions in files for which
   they are going to be used. [DEPRECATED?]

*) Js_of_ast should prevent use of "tag" or "type" as object field name 
   (for safety)

*) generate a "type: " field in smart constructors

*) in run_binary_op_compare, the « if (b_swap) » bit of code is ugly

*) find out how to have syntax highlighting

*) in pseudo_code
  - hide or change these:
    - var%void _ = // hide
    - return (r);  // get rid of parentheses
    - Debug.impossible_with_heap_because(__LOC__, m); // hide
  - remplace « with » with « open »
  - deal better with « else if » (see run_equal)
  
 
*) jsinterpreter.ml: replace 
      (fun s m -> Debug.impossible_with_heap_because __LOC__ s m; Coq_result_impossible)  s ("[run_object_method]   returned a primitive in [object_proto_is_prototype_of_body].")
    with (after defining an « impossible » function)
      impossible s "[run_object_method] returned a primitive in [object_proto_is_prototype_of_body]."


*) navig_driver.js: fix highlighting using a stack of events, with push and pop operations
   based on events enter and exit in the run_expr function.
   That is, deal better with src_next and src_prev by looking at
   the context that has an _term_ in it with an enter or an exit event

 
 =========================================================
LATER 

- Reactivate the generation of the lines of the form:
	  default: throw "No matching case for switch";
  by having js_of_pattern return an additional boolean 
  indicating whether there was a default case or not.
  This is needed to detect bugs in the spec where the
  switch are missing useful cases.


=========================================================
TRICK-- HERE IS HOW TO PRINT BROWSER STACK SIZE LIMIT:

	in the console, execute:

		var i=0;
		function inc() {
			 i++;
			 inc();
		}
		inc();

	then print value of "i".

=========================================================









