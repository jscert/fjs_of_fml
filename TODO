


LATER
- cases seem to be in reversed order, check and fix
   => corriger à la main le jour où on s'amuse à relire le code.
	=> order in pattern matching extraction seems to follow
	   order from the definition of the inductive type,
		instead of the order of the code.

LATER
- untab closing bracket for fun def
  => later maybe



- Choose a small example

    var x = 3;
    x = 4;
    if (x === 4) {
      while (true) {}
    }

- write a JS function that takes an esprima AST as input (sub-language for the
  moment) that generates an AST in our syntax (encoded of concrete types):
    { type : constructor; label0 : value ; … }
  this should remember locations

- edit JsSyntax.ml to put readable labels

- write a driver in JS
  - take a program in the text area
  - parse to esprima
  - translate to our syntax
  - call JsInterpreter.js using the correct function (see run_js.ml)

- translate stdlib.ml into stdlib.js

- correct the Makefile to make sure we do not generate everything all the time



- => binder qq part vers une comparaison --- dans un fichier js
  _compare_JsSyntax_native_error
  _compare_JsSyntax_prealloc