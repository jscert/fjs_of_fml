* Js_of_ocaml bis

** Why bis? & Purpose

   Because, there is already a tool named `js_of_ocaml` whose job is
   to produce efficient Javascript from OCaml bytecode.

   Here, we try to translate OCaml syntax to ECMAScript5 syntax, the
   purpose of it is to generate readable ECMAScript code, so that it
   could later be use in a step-by-step ECMAScript interpreter.

** Dependencies

   - `node.js` and the `esprima` package. In order to get the esprima
     package the more convenient way is to get `npm` (/node package
     manager/) and run ~npm install esprima~.
   - ocaml 4.04.0

** How to run it

#+BEGIN_src
make
make tests
./run.sh tests/js/the_file_you_want_to_run.js
#+END_src

   I you run into any error about *.cmi files that should not be
   present run the following command:

#+BEGIN_src
make cleanall
#+END_src
   
** How does it work?

   In order to get the statically typed abstract syntax tree (STAST) of
   OCaml we link against compiler-libs, we have tested against versions
   4.04.0. Previous versions are available for >= 4.02.1.

   On top, of this STAST, there is a custom back-end that
   transliterate OCaml to ECMAScript. The code written in OCaml cannot
   rely on code from the typical standard library. Therefore a
   file named `stdlib.mli` (found in the directory `stdlib_ml`) contains
   all the required definitions for the exemples to work. This file as
   a twin which is `stdlib.js` found in `stdlib_js`, in this file the
   functions whose prototype is in `stdlib.mli` are defined here.

** About the subset of OCaml supported

   * *Let (rec)* declarations, except ~let () =~ and ~let _ =~.
   * *If then else* statements, as excepted ~if then else~
     statements return a value.
   * *Pattern matching*, only one level of pattern matching over
     arbitrary types.
   * *Types declarations*, if a constructor take arguments (one or
     more), you should add an annotations to provide default names for
     the parameters. See example below.

#+BEGIN_src

type 'a tree =
  | Leaf of `a [@f value]
  | Node of `a tree * `a * `a tree [@f left, value, right]

#+END_src

    * *Records* Records are translated to objects. Record copying
      ~with~ syntax is supported with any number of field updates.

** About the Subset of JavaScript Used
- Object.assign (ES6)
- No type casting
- No prototypes
- Arrays (for tuples)
- Switch on strings
- ...

** Notes

   Historical versions of the repository required the OCaml 4.02.1 compiler
   source code to compile directly against. We are unable to redistribute
   these files for licensing reasons. If for some reason you want to build a
   historic version, then drop the parsing, typing and utils directories from
   the OCaml distribution into this directory, some further configuration may
   be required... Team members may find the whole historic distribution
   archived in the private jscert_dev repository.

** About the Monadic Rewriter PPX
   This is a OCaml AST preprocessor that converts ~let%x~ syntax into the
   monadic binder ~if_x~ with the continuation as the bound expression of the
   let term.

   For example:
   - ~let%some x = expr in cont~ becomes ~if_some expr (fun x -> cont)~
   - ~let%if_spec (s,x) = expr in cont~ becomes ~if_spec expr (fun s x -> cont)~

   The full list of available monads is provided in the file
   [[monadic_binder_list.ml]], but is reproduced below for convenience:
   - string
   - object
   - value
   - prim
   - number
   - some
   - bool
   - void
   - success
   - not_throw
   - ter
   - break
   - spec
   - assert
   - ret

*** ~if%ret~ Syntax Extension

   The ~if%ret~ syntax, which allows else
   branches to be elided in place of writing ~else Continue s~

   Extended syntax: ~if%ret condition, s then r1~
   Maps to: ~if condition then Return r1 else Continue s~

   It is syntactically required that the first expr position is a pair of
   condition expression and initial state variable to Continue with.

   Extended syntax:
     ~if%ret condition, s then r1 else r2~
   Maps to:
     ~if condition then Return r1 else Return r2~
   Note that the state parameter of the tuple is still required in this
   instance, but is ignored.

   Nesting ~if%ret~s is currently unsupported. :(
